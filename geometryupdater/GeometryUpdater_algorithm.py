# -*- coding: utf-8 -*-

"""
/***************************************************************************
 GeometryUpdater
                                 A QGIS plugin
 replace Geometry
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-12-15
        copyright            : (C) 2024 by Federico Gianoli
        email                : gianoli.federico@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Federico Gianoli'
__date__ = '2024-12-15'
__copyright__ = '(C) 2024 by Federico Gianoli'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingException,
                       QgsProcessingUtils,
                       edit)

class GeometryUpdater(QgsProcessingAlgorithm):
    """
    This algorithm updates geometries from a source layer to a target layer.
    """

    # Constants used to refer to parameters and outputs
    SOURCE = 'SOURCE'
    TARGET = 'TARGET'

    def initAlgorithm(self, config=None):
        """
        Define the inputs and outputs of the algorithm.
        """
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.SOURCE,
                self.tr('Source layer (Geometry to Copy)'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.TARGET,
                self.tr('Target layer (Geometry to Replace)'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Executes the algorithm.
        """
        source_layer = self.parameterAsSource(parameters, self.SOURCE, context)
        target_layer_id = self.parameterAsSource(parameters, self.TARGET, context).sourceName()
        target_layer = QgsProcessingUtils.mapLayerFromString(target_layer_id, context)

        if source_layer is None or target_layer is None:
            raise QgsProcessingException(self.tr("Invalid source or target layer."))

        # Get selected features from both layers
        source_features = list(source_layer.getFeatures())
        target_features = list(target_layer.getFeatures())

        if len(source_features) != 1:
            raise QgsProcessingException(self.tr("Source layer must have exactly one selected feature."))

        if len(target_features) != 1:
            raise QgsProcessingException(self.tr("Target layer must have exactly one selected feature."))

        source_feature = source_features[0]
        target_feature = target_features[0]

        # Copy geometry from source to target
        new_geometry = source_feature.geometry()

        if not new_geometry:
            raise QgsProcessingException(self.tr("Source feature has no geometry."))

        # Edit the geometry directly in the target layer
        with edit(target_layer):
            target_feature.setGeometry(new_geometry)
            target_layer.updateFeature(target_feature)

        feedback.pushInfo(self.tr("Geometry successfully updated."))

        return {}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm.
        """
        return 'geometryupdater'

    def displayName(self):
        """
        Returns the translated algorithm name for user-visible display.
        """
        return self.tr('Geometry Updater')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to.
        """
        return self.tr('Vector Tools')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to.
        """
        return 'vectortools'

    def tr(self, string):
        """
        Translation method.
        """
        return QCoreApplication.translate('Processing', string)

    def shortHelpString(self):
        """
        Provides a help string for the side panel in the QGIS Processing toolbox.
        """
        return self.tr("""
        <h3>Geometry Updater</h3>
        <p>This algorithm updates the geometry of a selected feature in a target layer with the geometry of a selected feature in a source layer. Both layers must have the same geometry type.</p>
        <h4>Inputs:</h4>
        <ul>
        <li><b>Source Layer:</b> The layer containing the geometry to copy.</li>
        <li><b>Target Layer:</b> The layer whose geometry will be replaced.</li>
        </ul>
        <h4>Outputs:</h4>
        <ul>
        <li>No new layer is created. The geometry of the target layer is updated in place.</li>
        </ul>
        <h4>Notes:</h4>
        <ul>
        <li>Exactly one feature must be selected in each layer.</li>
        <li>The attributes of the target layer remain unchanged.</li>
        </ul>
        """)

    def createInstance(self):
        """
        Creates a new instance of the algorithm.
        """
        return GeometryUpdater()
